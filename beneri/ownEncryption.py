import urllib.parse

def main():
    orig = "ca-%22%20%21tOm%22ePD%20m%20mlEmateh%3Emie%22atgtwennUt%20im-mwneam%3Eddw%20d%20-v%20i%20l%2CiaatGiil-mDalms%20%20%3Ee%20%3Cat%20m%20e/mk%3Cs%20%3E%20%22rht%20%20sthrae%20e.usf%22rf%3Etm//%22%20m%3Csa%3Da%20ne%20/%3D%20vt%22mp%22r%3Ec%20con%20m%20to%22k%3Cst%3D%3D%22rhihesthdch%20e.ntt%22rs-ic//c%3Ds%22.tmm1%20ms%3Cl%20n%20mtei%3Dps%22yle%3D%20/el%22s.yet%3Drjscfsjme.ssp%22ttcpx%3Dstyxa/%22se%22tcrms%20c%3Eml%20nmiaei%3Demdyleodlel%22yycet%3DaencfsukoyseldEsl%3E6rm%20%22%20%3E6vc%20iimmsrc%22%20m/rs%3Eavqceimviu.%22%20a%20nyt-%3E%22te%22iijtvdm%22rap%3Dv%20%3Cis%22l%3Dp/%3Enal%3Cthd%22e%3E/bceC%20%3Ct%3En%20%3DsbGaig%22on-2-ro.st%3AcEn%3C/F%23%22%3CemmAdmd%3Ci%3C%3D%20mdrd%22idymgda%3Dmi%3C%3Dme%20cdn%20m1norh%20eme%3Cr%3Ei%20md%20nyoioas%20lgg-ilmid%20Ch%22i%3C/o%20t%3Erm1%20meA%20%20e%20Ged%20laDveoa/%20e%22oarc%20%20uai%3E%3Elut%20v%20sy/i%20%20.eo%22vlpcjrp%3E.sm%20%22%20mp%20%20%20%3C%20m%20C%20r%20%20ctuyr%3C%3D%20llcesnp%20s%22shgti/poa%3Cmap%3Epmy4d%20m%20ie4%3C%20ipeo%20vrs%22map%3D%3Eu%20td%22%20m/top%3C%20%3E%20ooov%20rp%22%20m%3Cs%3D/%20%20atsrlulge%3Ecsi%20%22%20fem%20%20%20mx%20s%20u%20%20%20%20or%20%20l.scc%3Ccd/n%22alve.oom%222tms%20%3D%20v%20%20%20o%22m%20%20a%3E//%3C%20%3Dr%3Cef%20ymc%20a%22%3E%20%20%20a%22%20i%20e%20m%20md%20%20%20l%20m%20/%20%20l%20cmi%20s%20%22%20%20%3Ca%3D-%20%20a%22rmllr%20%3E%20pss%20%20%20so%20l%20%20m%22%20si%3D%20%20%20nsr%20%20l%22tmo%20%20%20%3E%20%20%3E%20%20%20%20%20%20%20%20%20%20%20%20%20h%20e%20%20l%23rlc%3Cs%3Ep/%22aam%3C%20bem%20m%20mr%20%20%20%3C%20m%20%3E%20m%20%20%20%20m%20%20%20%20%20%20%20%20%20ii%20c%3C%20%3Cs%20%22%3E%3Emg%3Dem/%20%3Erm%20%20%20%20m%20%20%20%20%20%20%20%20%20i%20%20%3Cl%20%20m%20m%20%3E%20%20m%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ll%20%20c%3Ccsi%3D%22ates-nu0%22k%20%3A%22%3E%20%3E%20i0%20%20%20%20%20/%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%20%3E%20%20l%3Cpic%3Clp/m%22a%22%20%3E%20he7%20%20%201%3Em%20%20%20%3E%3C%20%20%20/%20m%20m%3Cm%20%20%20%20m%20%20%20m%20%20%20%3E%3C%20%20%20%20%20m%20l%20%20%20%20isi%3Dl%20%20rse%20%3E%20%3Er0%20%20l%3C0l%3C%20sm/mait%20m%20ps%3E%20%20%20%22ip%20%20%20%3Cmsl%20%20s%20%22si%3Dl%3Danst%3C%3E%3D3g%3Af%20e/4it%22%3Eml%20a%22%3C%20%20%20%3E%20%20%20%20%20%20/%20/%20l%20%3Cimo%20l%20/%20%20%20%3C%3E%20%20%20/%20u%3Em%3Cmv%3Cl%20m%20o%20s%20%20%20s%20y%20%20la%3D%3E%3Dco%22lio%22sl%20mmn%20m%3E%3Ecma%20%20%3C%22lom%20tmvmalrhmeaa8%23ru1ta%3Em/t%22%22%20%3Ci%3D-si%3C%20%207%22/%3E%3E%3Dt%3A%20p/rce%20%3C%206%23ol%20%20C0%20/%3Ei-v%29%20d%3CAC%3Ec%20ai%20i%22lllm-ipta%20%3D%20s%3Cts%20%20%20m%22%22e%3C%20l-d4%20um7ntimda0f-%20tea%20%3Ds7%22a%3D%20%22aesleddp%22n2n%22oaBy4e%3EeSolo%20l%3Cbl0ncm%3B4%3E%20/le%22%20umuar%20%3C%3E%3C%3Cmlmltm/%3Calrdmtaa4tar7ta7a5d.da2ant%22dt%224%3D%20%22%3Ddm%3E%20%3D%20deLlu%22t/Amtllmiadysd%3Cayintt8%3B%3A%209rta%22ka5%3Drceda%20le%3E%22%22%22mi/%3Ddlm%3Cmudy%3Emmttiimddl%3A-%20tys%22%3Ds9%3Bny6%22%20t%3E%20a%22em%20t%22-8o-lR9o/hmeovmim%29a%3C%3E%3C%20%3E%20mlm%3Dl%20%20eshaisg%22pt-%226tm%22%3Ddmxd-%20n%20mt9e9sa1a9a%22adeta%200n%22fsea3e%20%220dop%3Dao3uoletm%3CEnp%29r%20Rmo%20/i%20ollm-ec%3Ca%20%3D%3Edmts%20/%20l%22%22emuu-d8t%3Cl7nyhyit3o%3Ae3clb%3B3%3E%23l%3B%3C%22i04otl-c%22%20ra%3D-v%290t%22BC%20t0-%3E%3Ci%3Da1lm-%22%22Ra%20%3D%20%3Eets2nRB.%22al%20%3Et%22%22mi%3C%3D-Admt%3E3Wtar%20ni7a1lTma4am%3Eadt%22d%3Ca%22%3Dstt2e%20%223rdo%3D%3A%205n0reea3%3E6n5dweU%20o%22%3Car%20s%20m/mi%20/%20ml%3Cimsdmt-d%22tar%3Dt%222a753-%209aa%204edd%22ea2n%22d5eg4ydt%22Fr/tfs%20%3Cms%20yl%20%20a%3Dsais%20i%22t-%22%3Dta.%3D%22ldet8-nyC%3Da3%5B%3Bo%3E%22lLh/KBs%3Comli%3Emlamild%3Caa%3Catt5att4rd5r.%208nd5tea3na%3D5dt7d%20a%22va%22%22%20Lia%3Dll.lcua%3C%3Ea%22lltitnp%22r-.yge2%3Dtilpa3%3D%3Asoda%3E%22n-%22%22oa%3E%20lC%3Cpt-3omi%5Dm%20/%20l%3E%20imsais-d%22t-%22%3Dt%22.%3D%2287-t4-a%207%3Da5%22ei%3E%22hM9FoCp%20d%3C2o/ri%20m%3Cm%20/i%20malm-sdaa%20%3D%22t6ts4%225d.%22a-%20nt%22%227e6%3D-Nh1t%3E8gpavnOil%20%3Elelmil%3C%3Eaa%3Catitattr-.8r.9%3Dtd5ta7%3Dna%3Dda%3E5d%3E%22%22%3Cd%22eePmnle%20/%20lg%3Eimsmi%3C-d%22dmt%3Dt%22tar88-7a7a%209%209a%22eheddP7%3C2n%221om%208im/drF/%20mtm%3Cmsa1%20ma%22a%22sda20-%22t2a%201%228d%22eS-%20n%3E0/8e4%3Cmme6cmlala%3Ed%3Camiltt0a%3Ca1r%20att%227e6r.-d1d5t1npna%3DS6o3d%3Erilt%22%20/umlo%3Emia%3Ciid%3Catl-tt1ra%3D1r%203t.%226ed7t-d1na%3D1nh7d%22T9pi1eUumilm%3E%3C%20l%3E%20imsais-d%22t-%22%3Dt%202%3D6%221ea.a-d2dt%221na2%3D%3EW2%3Cn%22AHvmn%20%3C%20/%20%3Edmimsl%20%20-d%22ais%3Dt2t-%22.1a3%3D4t%22%22a.a%3D-%3Edt%22%221R3%3D%3E%20W%3Em%22%20iHl/bi%3C%20amlltita%3Car-%22att5%3D-1r5a%203a9a%22efdt%22%202%203%3D%3Eriie%22LlBll%20%3E%3C%3Eamiltita%3Car-%20att%22%3De2r4-d7%202a4nieddf%22L2n8%20n%3Ea4eiHi%3Cvllm-m/ma%20%3D%20matsdsda%20%22n%22t.ea%22d0t6ddna%3Dn%3En%22d1i%20%3Cn%3Ee%20gmHg/m/dm%3Cm%20mt%20masa7sda%22at%22t4a8%3Da3ada%3Edt%22%22%22%20%3E%3D%20d2gg1rn1l%3Cel/e%3Cm/%3Cmitdmtalrtaraa64a%220tat9-d.d%3Da7nt%222%22a4%3Dn2%20fi%3EBe%20s%20g%3Elr%3EiHi%3Ciilm-tl-a%20%3Dra%3Dts3%22td.%22a-%20nt%22%221e5%3D-2%200n%3E1e%20aig%20%3Crf%3CHrm%3Esmm/dimd%20mt-%20tsa1%3Ds1%22a%203%22%20%224ea%22e-d5%22-21nf21f%208se%20sril%3Crl/%20%3Cm/%3Cmitdmtalrtaraa91a65ta%202ad.deddnt%224n%229%3Dnf6ni%3ELsiL%20g%3El%20%3EiHi%3Ciilm-tl-a%20%3Dra%3Dts38t2.%22aa.at%22%22dt%22%3D-5%22%3D3%3E1en%3Eeg%20%3CLg%3CHrm%3EHmm/dimd%20mt-%20tsa1%3Ds1%22aa7%22%20d8da%22ent%22%22-62%3Dn41fi%3E/e%20s%3Cgm%3Crlmlam/%3Cd%3Cadmttt9tar1rd1a0%204n%207aea0edd2df8n%22%20%22sf0nrimsiL%3E%3C%20l%20%3Eims%3Cii-d%22tl-%3Dt%22ra%3D22-3t%20a%202a%22e%22e%20%22-984r61fef%3Ee%20sisiirmlm-l%3E%20a%20%3Daists7t-%22.%22a.%3D%22t%22%22t3-%3D-9%3Da2%3E2e%20%227g%20in%3Eelr%3C/gim%3Etmllalra%3Caaa7att6ta2r.d.dd2tnt%22na%3D2%3Di3d%3Ef%3E%3Ci%22gsnm%3Cnlm/%3Em/%3Clmldmt/m%3Etariil2a4ume%204al%20keddc%3Dd6n%22ngrf6no-0si/e%3Ae%20%3Cmhe2imd%3Ai%22-%20t%3B8%20%3Ds2%20%3E%209%22%20%20%20%20a%22e%20%20%20%22-9%20%20%2012%20%20%20ig0rlm-le%3Ea%20%3D%3Ciuts.m/%3C1%22t%3Emla5%3Dm%3C%3Cda%22smy7%22e%22tal%20krbuc%3Ddcolngr%23oco-f7f%20f%3Atg%3Bt%20f%228hx%3Dio%20p%20%20To%20%20%20lf%3E%20%20%20%22to%20%20%20%20To%20%20%20lf/m%20%3C%3Ctmdmtmlatard%3Ca1a5tt4%222d1ra-%20nd3d1e2nt7s4y5%3Da%22tat%22arbuf%3Dscol%20u%22%23of%3Dtaff%22ldet%3BenyCale%20%3BofkcLh/h%20s%3Comaeemlafkcd%3Cah%20stt4iem1r%20l%3E%20%226eais-d5t-%221nT1%3D%20S5%20a%22e-Av%22-4%20Ci%201al.%3C%22dem%3Etld%22alryteaa2ilp5td%3Aso%208n%22n-ea5a%3E%205dtpt-i5ni%20mAl%20l%3E%20ey%20aisra%22t-%2200-1%3D2%20%3E%20a.at%20ldt%22/vm5%3D%3EmiaR%22%20d%3CahTttt52a/1r%20%20%3Cm%229eimd-d6-%20t1ni%3Ds1L6p.%22%22ic%3Et2-isi%3Da1lm-%22%22ta%20%3De%20%22ts%22t%3Dm1%22-fiea%2010t2%22ePE%3AD%3E6/CNa%3Cem.h%3Cmld%3E2m%20mtl%20%20sa1ais%22a%22t-%2226-2%3D7a%201a.a%22ePdt%22%3E7A8%3D%3E%20hik%22Lls%3C%3C%20lm%3Etm/%3Calrdmtaa1tar8td1a7%202nd6tea0na%3D9db8d%22u1sa5eb%20%20ic%20%3E%3Ci%3C%3Eilm-tl-a%20%3Dra%3Dts.8t.1%22td7ta8%3Dna%3Dda%226d%227%22Po6o%20%3E/st/%3Cum%20%3Cmmldimd%20mt-%20tsa2%3Ds1%22a%22.%22%2270-t4-a%202%3Da1%22eS%22%22R%3E0sB%3EoAh%3C/oi1smml%3C%20/%20dmtimstar-d%221a0%3Dt6%229d.2a-%20nt%22%222e1%3D-%3ER0b%222Asuy%20S2is%20.s%20%3C%3Ei%3E%3Citl-lm-ra%3Da%20%3D1t.ts.d8t9%22tna%3Da2%3D6d%22da%22o0%209%22%20%20w.w%3E.lv%3EvA%3Emili3ia%3Calm-atta%20%3D0r1ts.%206a1%22tedda1%3D0n7da%22h9w6%22bsovm%3El/%20i/%20mml%3Cmiadmtd%3Catartt12a92r%20%220d%225e-%20n-d12e32naS1oW8%3Csh%20Hvm%3Csl%20/%20m/%3Cimsdmt-d%22tar%3Dt%202a4%221e%221d-d8-%20n1no2e5R0tT1ueo%20Uh%3C-ui%3EpmlB%3Cl%20%20m%3Etaisalrt-%22aa77%3D65tta.aa3%3Ddt%22da%222%3D%3E1%22ee%22Rl%20ol%20%3El%3D7mildr%3Ea%3Ca%225eattvU%207r3mria9alB%3Cdt%22m%3Em9%3D%3Em/sm%22R%20m%22r%20%20%3Dtr%29n/gbc%20%3Cm-o%23imd%3Ao7-%20tefm%3Ds1m%3Ba%22%22dd%3Ca-%20ntt71e91ras5yd6d%22tont6%3Acb7%3Dm2%23%3Bo%22en8ov%20%3C%20ca%29%20m%29C/%20/%20%20%3Cmimsum%3E-d%22%3Cll%3Dt%20yue%221ealk-d7ucd1nalnrd9eco0dt%22%22emtfel%3E%20l%20paiss%3Dot-%22nlE8%3D%20%3EnRa%22e%20m%20%22-7-o%3C%3E1odn%20LRa%20/u-eA/m%3Cl%20%3Emlymiltuaa%3Cabluattocl7r7onca7afo%22dt%22%3Bel2%3D%20%3C%3Eaa%22%22tita%3Dlr-6suy5%3Da%22tid.dad%3Ant1ey%226%3Dlp%3Byy%22lot%20oedamebo%22lk%3E%3B7rmi%3Ce%3EA%3Emm%20%20ilmsl%29%3Ce%20%22m%3Etk%3Dralrdgcaa8r-%231td0%3A7%203nmemea1%20ma4dnsdai2m%22t5%20a%2071%200ila%22e/sm%22-5mid%201t%20mt%3Dscsa1r%22%23%22ad5%3A8%205nC2vea7Com5dt%20a/a2f%20%3Cmea%20imd%22aK-%20tC%3EE%3Ds2E%20%3E.%22%22iNut3-/m%3C%3Da2mlm%22%22Fm/%3El%3E3imon%205/%20%3Ce%20%3Cmlm%3Ec%20%3E/i%3C%20idm%3Ctl-mvtra%3Dps%3D6t%22e%20/t2-t%22c%3Da1sj%3E%22%22d%22rr%3D%20damou%22te%20%27BlA%28%20%27SLRov%20%3CClm%29am/%3Ct%20p%3Emmor5um%3E5%20m%3Cllm.n%20/%3Ce%20%20%3E%20mpd%2Cdmv7%3D%20mi/%20mt%3E%3Cmr%20ecmitC5trp3rmtyxm5eaea%20mpivtan%20mpv%3Dtmvmdm4b%3Di%24%20msi%20e%20ah%2CdmCt%20%20msraCt%20od-r%3DL3eh%205%20m%20%2Ca%20%2C%20f%20%20L%20o%3Dua%20o5d%24em4%20dt%22smatfmhtpm%5Dv%20a%20%20mc.%3D%2C.it%205%20nu%3Dd%20h%20TteC%20r%20m5r%2C%3BLc%207%20nm%24r%20%3D%20tra%20t%7B%28%20prenee%20tnmdeaetunempmlre%20me%28cmlD%20mlm%28t%5Bm/na%27%22i%24ia%3Dllpp%27u%3Bnsa%20%29%20.und%20oedereettkire%27n%2Csma%27etotpc%20%7Bmou%29i%20ifn%20mteo%29%28%20atlrvheouull%3Ctcq%20nmy.em%20%20tSr%20mi%29omh%20e*%7Dmrse%28/%23dnsu%27-s.%3Dtti%20Nmt%20%29m%20ed%27v%20mmLEsml%20ei%28%20%20syrpi%20nfune..ou%28etNmn%20sc%20im%20%3Daeif.-%27%3Bus.%27m%3Bgeh%29m%271t%29%28m%29%20%20%20%27fv%20%20tE.s.%20aie%28tporticNam%27ualeftn%27m%3Bonm%20%27%20m%28es%20m%20me%20e%20v.a%20%20hfn%3Bptr%29umNad%29mmlos/mcma%20nmpnet%20t%7Bpoy%29l%20mt%7D%20mvmm%24%28%20pomm.i%29ardda%20ndLm%20%20ete%20%20osnbe%20%28%27u%20y.%20c%2Cim%29%20et%7B%20%20h%20%29%20%5B%20%23p%20e%22r%5Dtre%22palD%28l%27emt%7Dmsmmm*m%3D%7Dm/u%20m%20ifn%20m%7Bao%28e%20%20my%20%20mvim%20%20%20pdfo.i%29uee%28a%20%7Bsm%20%3B%20%20m%20%20%20rv%20dh%24ppia%23e%27%3Blm%5Dls%20m%20a%29%3D%24%20%27esse%28%3Du%20%20lfymem%29acm%20ms.amm%5B%20N%27%27m%22%20%27%20%3Dh%22m%20%20y%23demsa%5Dtml%20ndn%20m%20eLld%20oce%20uee%2Cimmsm%29p.%20m%20%27mb%28%20%5B-saf%27%22.ana%3D%22ede.ylttcNcm%27n%2C%27aa%27lt%27pmc%20%29%20m%7Dei%20%7D%20m%20%7Bemm%28d%20rr%24frompeaiee%27l.%28erE%29ee.%20ivt5Xnrs%27e*tc%28%27pdslky%20ehma%28Ct%20e%24krasre%29%20%29hd%27vCt%3BLEsra%20ei%28%20moirks%20gfcnolaou%28l%282mnm/ym%20mim7m.vummrncTh%24m%20t%20%23e%27l%3Dy%5DuE/a7d%29i%202%20LvrC%28aescrh-i%28ua%20tfknpreonm%20t+m%28ia%29tv%20upremd%20mt%20%3Dtocmne%21deole.%20%20..%20%3B%28eeX%20%20.5r%29ov%29%7D%20mdm%20%28%29%5B%20m%24f%27%22%20%20et%3D%22r%28u.edmf%29eat%27tstnns.%3D%27el%20Ne%27c%20t%20%20c%2Cim%27s%29tml%20%20%20%7B%20%20e%20e%20.%20%20reo%20h%24mvdd%23e%27mit%5Dusmuma%29%20%20mfesmiie%3B%3Dmude%3Bmemt%20dmi%20m%20toa%27%20hdmf%3D%5B%23%20toe%22%5Diumc%22amn%20ale%20m%20%27mur%20a%3BmmMmo%20meltvm%20m%28oc%20m%20.it%28%20%5Bnu-f%27%22%20Ttt%3D%22r%20e.eltC6Ncm%20rm%20a%27m0%20m%27%29%20m%3Dm%7Di%20%20..vnh%20%28eoprfeeu%3Dd%20rn%20trom%28c%7Bietm%29msea%20maha%20%20v%20%29p%2Ch%3Df%29%25%20r.%20%20mnd%28o%20%20treea%20oireohnsmaerthtppds%29a/%20eh%29%20%2CCt%29%20%20%20ra%29%20%20s0%20%20M%20t%20%2C%20lao%20%20a%28oiMzo.vultencT%28op%20t%20an%20r-C-tCttrtsr%20e0eh0m6%206%29%20%20m%20m%29%20%3D%20M%20%20j.%20l%20%20%28%28f%28yQyC%20aa%27lrh-%20lma%20tmifpre%20ma/t6vo%20m%20m%3Dr%3C%20m%20%200n%20%20%20e%20ih%3Df%20gmr.%20m+%20d%28h%20%20%5DeC%20i%20strrs.%3Daat%20Nm%20p%20m%20%20%2C%25m%20m%27%20m%20%20%20ll%20%3Dy.du%20r%5Bit.elsa%22ipt%3Daa%27s%3Bt%27p%20%29%20ar%27r%20%28+tc%20%20%20.%22a%3BiiNlpl%20l%22mgt.%3Bnlm+hmm%22%20%20%29%20%20me%20%20%5Bs%24rclaaesale.%20w%27m%3B.t%3Dm%27m%20id%20m%28i%20rp%24aueisl%20Trstt-%20mhra*Ct%29+tsradt%20hn/eeC%20tCt%5Dr%29sraa%27sha%29es%20%20p0a%3Di0%20%27%3Bym%20%20mmm%20m%25%20%28%20.%20mpk%27b.%20si-%29erry%27eus%29dlh%27rr%28tve.%3Do%28c%20H%20e.t%3E%20%20en-m9+a%20t%27%3A%20pre+%20%20%28te+%27%20h%20p%3E%28%20%20a%20s9%20r-C%27%3A%3Bttr%29+%20*e1%20mp%29%20+.%20s%27%20mernm%3B%20es.%24m%27%29gHo%28rri%20%20gc%3DT9e.t%20%28%3Ainn%20%20%20TnL+%20%27%28M%20%20n%28%20m%20%20%3A9%20%3F0%20%20%3Am%27%20%20%20+%3A%29%20%20%20m%20%27%20%3B%20m%20s%20%20m%20%20%3F0%20mM%20%27%20%20ilms%20fav%24m%27%20oco%28r.it%20glnu%29t.%27%20Tnnhee%20%20Mn%20pddnL%3En%26%3E%3F%20n%20Lr%27%20%27a%3Dt%290+pt%20%27%20+%7Cefz%20%3E.M%20%3F%20z%28l.%27%20%27ovnz0%29ec%20m%20%20etem%20%20%20%29pf%20%28an%7Bt%20.%29tmoh%28mm%20dro%20%20ereed%20rirerom%3Em%20ietL%3Doseo%26oeoa%20o%20pmp%20%20ot%20%20tCsar%20erh%7CtCta%20hsrootroa%20ioemp%20udr%20%20hTrmC%20%20%20i%3DraLd%3Ehd%3DmeC%20mo%20mrm%20m%27%20m%20%28%20e%20%20iy%23%29.vu%27rrncTe.%20%20t%20%20Har%3DLf%3Dn%3BtmiuM%20m%20Tnms%20amL%20htp%20mf%20a%20i%20dr%3DLi%20u%3Btmaem%20m%20%29s%20e%20d%20m%20pne%20%20e%20tnd%20yoe%3Baom%20p%20m%28m%20%20%24%7D%20mp%20amm%27%20l1%28mlihny..TnL%29ie%20MevatlD.sn%27etH%28e%27%3Brmkccmm%20n%2Ce%20%20%20%28t%20%28%20vm%29fo%20pe%20%3De.%20%20armd%20a%20a%20%20%20pgo%20%20iNre.vlude%29pmlr%27%20%3B%20%28c%3Dm%20ma%5Bum%7D%24a%22%29pma%27lmsl%27m%3BsdtE%20motdiLtDnLr%20otleclet%20iuA.tifnutt%7Bomaer%20mDaa%3Bu%20t1t%20elt%20mte..r%20eetttC.enqerty.eetttSrA.tdotuttdafaerte%5Daa%3Bm%22m1tm%20m%20mmna%20te%20%20pr%3Dpdaf%20uf%3Degatguirebrt%27%28id%28be-%27t-d1%27s**n%20m%29%20%20%3BCsmad%20rhtpeht%20a%20.%20.a%3Dgtatgrttgerebtra%28idt%28%29-%27t%27-m%27s*m*%20m%29m%20mo%20m%20e%20eL%20or.e%20oemnalD.t%20pAttarmutemt%20ata%20m%23dt%29%27%20rm%27mep.%20mn%29%20Haetri%20%3Dpe%3DTgr%20erenegAneLituMe%29%27ba%7D%3Bmeddm%3Be1nmdmjm%3B%20%20f%20vmdyQbciravttuiilm%3DTsmhtt%20hc%28%29eC%3Bjimmrmm%7Bm%20m%28mm%20l%24y%20m%22ha%27%28%20tn1eu%23%20Mn%20t-n.Laobtttit%22sr.Tir%27mHmdaemmmu%2Cm/m/m%29%20i*e%20m%20unrvv%2Caei%20%3D%20erw%20%20%20%20%20m%20%20%20fjn0i%20ou%28m%2C%20mnm%20%200%20m%20%20%20m%20%20%20m%20%20%20%20j%20%20%20i%20p%3D%20mlnsm0%20uit%20m%20%29ta%20%20%20%28.dvz%2Cb%27e%20%25%20%20lr%20mn%3Btm%20%20tmm%20a%20oa%20%20oh0%20r06rmm4mm%29%20%20m%20%20m%20%20%20%20%20%20%20%20%3Dm%3Dit%20m%20ns%28s%20%3Dlet%2C%20mc%20%7B%20%20%20%29i%20%20%20%20%20mm%20m%20%20%20%20m%2Cm%20m%20%20m%20%20%20%28%20%20%20%20%20%20%20%3D0%3D%20mm6%20mv%20%20m%20%20m%20%3D%20M%20%20%20.%20l%20%20a%28f/e%20r%20v%20ernm%2Cmivm%20m%20mv%20n%20%20%20%20%20evI%20%20%20rtam%20%20fvn%20%20%7Dou%28%20%20%20mn%20%20m%20%20m%20%20%20%20m%20%20%20%20%20%20%20%20%20%20%20%20%20f%20%20+ii%3Di%20m%20%20%7Bm+%20m%29m%20m%20%20m%20%20%20%20%20%20%20%3D%200%20%20l6i%20Ict%20%3B%20an%28%20%20%20%29lmm%20h%20%3B%20t%3Dr%20%20%20o.%29%20%20m0%28%20%20m%20%20%3B%20%20%20%20%20%20/m%20%20/%20%20%20m%20tde%20%20%20gcam%20mi%20%20%20m%20%24b%20%20%20%20%2Cts%3B%20m%20t%20mm%20tcu%20%20%20rne%20%20%20dne%20s%20ur%20m%25mmr%20%20m%20%20%20%24%20%20%20%20%20e%20%20ae%28%20fMorktil6siim/mwy%20%20m%20%3Dd%20%20%20%20/%280o%20%271v%20hnn+0mvarm%27%20la%20%20m%20oej%20%20ph%20s.%20sriperroi%20us%29%20tn%27rr%20uQe.%3Dyjm%20H%20%20m%20%3E%20%20%20%20%20m9+%27%20s%27%3A%20-.a+%20%20%27b.+%27%20l%29.%3E%28%20te%20s9%20%20h%20%27%3A%3B%20i%20%29+%20%20*%20%20m%20%25%29%3B%20%20%27%20%27%20%28%20r%20%20%20g.l%24%20%27.e%27o%28rhee%20gcn%29%20e.tLr%3Einn%20%3DnTnL%20%20%27%28M%200%20+%20m%20%20++%20%3F0%20%20%3Em%27%20%20%20z%3A%29%20%20%20%27%20%27%200%20%29%20s%20%20%20m%20%3F0m%3B%20%20%27%20%20m%20ms%20%2C%20%3B%20m%20%291e%20%20%24r%20np%20oep0sr%200tinstl%20d.gnnsmHiMm%20%7D%20Tn%20mm9%28%3Fm%29j%3A%20%27%28m%29%20%20%29yQ/%27n%27*ms%28%3Az/m%3E9%20%3Ftcb%3A%20%27/m/+%20z%3Comm%20m%3Eh%3C%20m%20%20%7Dl%20%20000em%22//%20%3Elhrese%3Dm%2010mS%3Cmilt%3C%3EecoCmGmmm%20%20n%20%20%20ie.%3Bmm2Atm%7D%29lemuer%20vmmm/eihmm%3CTm%3Dript%3C8mm%3Cm%3CCdy%3E%20Yhtml%22"

    data = urllib.parse.unquote(orig)

    # First the end of the encrypted data is analyzed, considering the way
    # this has been encrypted (Same as decryption but from the start, symmetric).
    # It is assumed that some elements will be missed and not edited, based on
    # this we could find some characters.
    print(data[-29:])

    # Actual footer:            hmm<Tm=ript<8mm<m<Cdy> Yhtml"
    # Guessed footer:           mmm</script>mmm</body></html>
    # Difference in footer:     m   /sc    >m   /bo   </    >

    footer = "mmm</script>mmm</body></html>"

    # Since the ending elements only will be edited once (since encryption tool
    # would overshoot when you get close to ending and not edit anything) we can
    # look for possible indicies where the swap could have taken place. This is
    # done by looking for the characted guessed to be in that spot.
    found = findMatches(footer, data)
    print("Found numbers:")
    for list in found[:13]:
        if list[1:]: print("{0}: {1}".format(list[0], list[1:]))

    # Looking at the output you quickly see that there is a cycle of numbers
    # reoccuring, the reoccurance is happening on a distance of 6, therefore
    # the password must be 6 characters long.
    pwd = [[] for i in range(0, 6)]

    # On position 0, 6, 12... number 110 is found, the character n!
    # To find the position for that number we find out where in the password
    # the end is, and adjust based on distance to the character.
    # Same is done for the other characters found, 105 and 115.

    # Position in password of last char - index from the back - positional offset
    pwd[((len(data) - 1) % len(pwd)) - (0) - (110 % 6)].append(chr(110))
    pwd[((len(data) - 1) % len(pwd)) - (4) - (105 % 6)].append(chr(105))
    pwd[((len(data) - 1) % len(pwd)) - (5) - (115 % 6)].append(chr(115))

    # Because of how the encryption works the swaps "sync up", because of this
    # we know that since only three unique cycles was editing characters in the
    # ending, the last three characters must be "synced" inside our characters.

    # Charcode + position in password determines this, that cycle will then edit
    # every char where (Charcode + position) + n where n is [pwlen, 2pwlen, 3pwlen...]
    cycles = [(105 + 3) % 6, (110 + 2) % 6, (115 + 4) % 6]
    numsInCycle = [val for val in range(97, 123) if val % 6 in cycles]

    # Because of how the encryption works the small charCodes naturally edit large
    # indexes before larger charCodes do, this means that the values we found
    # earlier in fact is the largest values in each cycle. Thefore only smaller
    # charCodes then the ones found will be considered.
    positionsToFill = [0, 1, 5]
    for number in numsInCycle:
        for pos in positionsToFill:
            if (number - pos) >= 97 and number <= 105:
                pwd[pos].append(chr(number - pos))
        
    # When now looking at our password lists, we have found 4 characters and
    # the other two has 3 possible characters each, which is a total of 9
    # combinations that could simply be tested. However, at this point it was
    # quite obvious what the password was.
    print(pwd)

def findMatches(footer, data):
    found = [[i] for i in range(0, len(footer))]

    for i, char in enumerate(reversed(footer)):
        for j, randomChar in enumerate(reversed(data)):
            if j - i > 122: break
            if char == randomChar:
                if j - i > 97:
                    found[i].append(j - i)
    return found

def decrypt(data, pwd):
    password = [ord(val) for val in list(pwd)]
    edit = list(data)
    passnum = len(edit) % len(password)
    for i, e in enumerate(reversed(edit)):
        passnum -= 1
        if passnum == -1: passnum = len(password) - 1
        pos1 = len(edit) - i - 1
        pos2 = (len(edit) - i - 1) + password[passnum]
        if pos2 <= len(edit) - 1:
            tmp = edit[pos2]
            edit[pos2] = edit[pos1]
            edit[pos1] = tmp
    return "".join(edit)

main()